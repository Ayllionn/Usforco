import os
from glob import glob
import json
from rich.console import Console

console = Console()

def load(f):
    files = glob(os.getcwd() + "/data_exploit/database/*.json")

    files_dict = {f.split('\\')[-1][:-5].split('/')[-1]: f for f in files}
    try:
        data = {}
        file = files_dict.get(f)
        with open(file, "r", encoding="utf8") as file:
            try:
                data.update({f: json.load(file)})
                console.log(f"{f} : [green]Loaded")
            except:
                console.log(f"{f} : [red]ERROR[/red] : Failed to load")
    except:
        return {}
    return data

def save(data: dict) -> None:
    for k, v in data.items():
        with open(f"{os.getcwd()}/data_exploit/database/{k}.json", "w", encoding="utf8") as file:
            json.dump(data[k], file)
            console.log("file was [green]saved")


def update(txt_name: str, **kwargs) -> str:
    data = load(txt_name)
    if data.get(txt_name) is not None:
        data[txt_name].update(kwargs)
    else:
        data[txt_name] = kwargs

    save(data)

def set(txt_name: str, **kwargs) -> str:
    data = load(txt_name)
    data[txt_name] = kwargs

    save(data)

def get(txt_name: str, *args):
    data = load(txt_name)
    try:
        a = txt_name
        dat = data[txt_name]
        for a in args:
            dat = dat[a]

        return a, dat
    except KeyError:
        if len(args) > 0:
            print(f"{txt_name} et {'->'.join(args)}, aucunes données ne suis se chemin")
        else:
            print(f"aucunes base de données porte le nom de {txt_name}")
        return None, None
